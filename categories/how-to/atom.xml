<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: how-to | Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/categories/how-to/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2017-09-13T07:34:35+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use Docker in Docker (DinD) and Docker outside of Docker (DooD) for local CI testing]]></title>
    <link href="http://blog.teracy.com/2017/09/11/how-to-use-docker-in-docker-dind-and-docker-outside-of-docker-dood-for-local-ci-testing/"/>
    <updated>2017-09-11T08:10:00+00:00</updated>
    <id>http://blog.teracy.com/2017/09/11/how-to-use-docker-in-docker-dind-and-docker-outside-of-docker-dood-for-local-ci-testing</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2017/09/11/spintop-dind.jpg" title="Docker in Docker" >
Credit: <a href="https://github.com/jpetazzo/dind">https://github.com/jpetazzo/dind</a></p>

<p>Although running Docker inside Docker (DinD) or Docker outside of Docker (DooD) is generally not
recommended, there are some legitimate use cases, such as development of Docker itself or for local
CI testing. And in this blog post, I&rsquo;m going to show you how to use DinD or DooD for local CI testing
as it&rsquo;s a very typical use case for local DevOps.</p>

<!-- more -->


<h2>The differences between DinD and DooD?</h2>

<p>DinD is the opposite of DooD.</p>

<p>DinD includes a whole Docker installation inside of it.</p>

<p>DooD uses its underlying host&rsquo;s Docker installation by bind-mounting the Docker socket.</p>

<p>Obviously, DooD should be faster because we can leverage its caching mechanism, and DinD should be
cleaner. DinD should support parallel running but DooD does not, or at least, not very reliable
with my observation. If you want to conduct the clean testing, use DinD. If you want to conduct the
faster testing, use DooD.</p>

<p>DooD is simpler to use than DinD.</p>

<p>And if you want to test with different versions of <code>docker</code>, <code>docker-compose</code>, use DinD and DooD.</p>

<h2>Local CI testing with DinD</h2>

<p>You can use <a href="https://hub.docker.com/r/library/docker/">https://hub.docker.com/r/library/docker/</a> for local testing, however, it&rsquo;s <code>alpine</code> image
which is not very suitable for local CI testing since it is not the default travis-ci environment.
We should use Ubuntu for executing CI scripts on all the CI systems (gitlab, drone, etc.) because we
can port the CI scripts easily between these CI systems.</p>

<p>That is the reason why we build <code>teracy/ubuntu</code> Docker images to be used with DinD, you can check out
the project here: <a href="https://github.com/teracyhq/docker-files/tree/master/ubuntu">https://github.com/teracyhq/docker-files/tree/master/ubuntu</a> and the built Docker
images here: <a href="https://hub.docker.com/r/teracy/ubuntu/tags/">https://hub.docker.com/r/teracy/ubuntu/tags/</a></p>

<p>We also have <code>docker-compose</code> installed to the <code>teracy/ubuntu</code> Docker images for faster testing
with it.</p>

<p>Let&rsquo;s see how it works:</p>

<script type="text/javascript" src="https://asciinema.org/a/137135.js" id="asciicast-137135" async></script>


<p>The commands from the above video:</p>

<p>```bash
$ docker run &mdash;privileged &mdash;name df-docker -d docker:17.06.0-dind # start DinD container</p>

<p>$ docker run &mdash;rm -it &mdash;link df-docker:docker docker:17.06.0 sh # run docker image (Alpine)</p>

<h1>docker version</h1>

<h1>docker-compose &mdash;version # no docker-compose</h1>

<p>$ docker run &mdash;rm -it ubuntu bash # run Ubuntu image within the Docker Alpine container</p>

<h1>uname -a</h1>

<h1>exit</h1>

<h1>uname -a</h1>

<h1>exit</h1>

<p>$ docker run &mdash;rm -it &mdash;link df-docker:docker teracy/ubuntu:16.04-dind-17.06.0-ce bash # run Ubuntu image</p>

<h1>docker version</h1>

<h1>docker-compose version</h1>

<p>$ docker run &mdash;rm -it alpine sh # run Alpine image with the Docker Ubuntu container</p>

<h1>uname -a</h1>

<h1>exit</h1>

<h1>uname -a</h1>

<h1>exit</h1>

<p>```</p>

<h2>Local CI testing with DooD</h2>

<p>Let&rsquo;s see how it works:</p>

<script type="text/javascript" src="https://asciinema.org/a/137139.js" id="asciicast-137139" async></script>


<p>The commands from the above video:</p>

<p>```
$ docker run &mdash;rm -it -v /var/run/docker.sock:/var/run/docker.sock docker sh # start DooD container</p>

<h1>docker version</h1>

<h1>docker-compose &mdash;version # no docker-compose</h1>

<p>$ docker run &mdash;rm -it ubuntu bash # run Ubuntu image within the Docker Alpine container</p>

<h1>cat /etc/lsb-release</h1>

<h1>exit</h1>

<h1>cat /etc/alpine-release</h1>

<h1>exit</h1>

<p>$ docker run &mdash;rm -it -v /var/run/docker.sock:/var/run/docker.sock teracy/ubuntu:16.04-dind-17.06.0-ce bash # start DooD container</p>

<h1>docker version</h1>

<h1>docker-compose version</h1>

<h1>docker run &mdash;rm -it alpine sh # run Alpine image with the Docker Ubuntu container</h1>

<h1>cat /etc/alpine-release</h1>

<h1>exit</h1>

<h1>cat /etc/lsb-release</h1>

<h1>exit</h1>

<p>```</p>

<h2>Volume mounting</h2>

<p>Volume mounting is a bit tricky, you must understand the underlying mechanism of its to get it work.
Basically, you need to make sure the mounting path from the running containers must be the same as the
DinD containers or DooD containers.</p>

<p>Let&rsquo;s see how volume mounting works with DinD:</p>

<script type="text/javascript" src="https://asciinema.org/a/137150.js" id="asciicast-137150" async></script>


<p>The commands from the above video:</p>

<p>```bash</p>

<h1>volume mount with DinD</h1>

<p>$ pwd
$ ls
$ docker run &mdash;privileged &mdash;name df-docker -d -v $(pwd):$(pwd) -w $(pwd) docker:17.06.0-dind # start DinD container
$ docker run &mdash;rm -it &mdash;link df-docker:docker -v $(pwd):$(pwd) -w $(pwd) teracy/ubuntu:16.04-dind-17.06.0-ce bash</p>

<h1>ls</h1>

<h1>docker run &mdash;rm -it -v $(pwd):/opt/app -w /opt/app ubuntu bash</h1>

<h1>ls</h1>

<p>```</p>

<p>Let&rsquo;s see how volume mounting works with DooD:</p>

<script type="text/javascript" src="https://asciinema.org/a/137152.js" id="asciicast-137152" async></script>


<p>The commands from the above video:</p>

<p>```bash</p>

<h1>volume mount with DooD</h1>

<p>$ pwd
$ ls
$ docker run &mdash;rm -it -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/$(pwd) -w $(pwd) teracy/ubuntu:16.04-dind-17.06.0-ce bash # start DooD container</p>

<h1>ls</h1>

<h1>docker run &mdash;rm -it -v $(pwd):/opt/app -w /opt/app ubuntu bash</h1>

<h1>ls</h1>

<p>```</p>

<h2>Local CI Testing with a real project</h2>

<p>Let&rsquo;s see how we can conduct a local CI testing with the <a href="https://github.com/teracyhq/docker-files">https://github.com/teracyhq/docker-files</a> project.</p>

<p>Let&rsquo;s dive into the .travis.yml file <a href="https://github.com/teracyhq/docker-files/blob/master/.travis.yml">https://github.com/teracyhq/docker-files/blob/master/.travis.yml</a>
to test the following scripts:</p>

<p>```yml
before_install:</p>

<h1>install the latest docker and docker-compose versions</h1>

<ul>
<li>sudo apt-get remove docker docker-engine</li>
<li>sudo curl -sSL <a href="https://get.docker.com/">https://get.docker.com/</a> | sh</li>
<li>sudo rm /usr/local/bin/docker-compose

<h1>the latest docker-compose version</h1></li>
<li>export DOCKER_COMPOSE_VERSION=$(curl -s <a href="https://api.github.com/repos/docker/compose/releases/latest">https://api.github.com/repos/docker/compose/releases/latest</a> | grep &lsquo;tag_name&rsquo; | cut -d\&ldquo; -f4)</li>
<li>curl -L <a href="https://github.com/docker/compose/releases/download/$">https://github.com/docker/compose/releases/download/$</a>{DOCKER_COMPOSE_VERSION}/docker-compose-<code>uname -s</code>&ndash;<code>uname -m</code> > docker-compose</li>
<li>chmod +x docker-compose</li>
<li>sudo mv docker-compose /usr/local/bin</li>
<li>docker version</li>
<li>docker-compose version
```</li>
</ul>


<p>Let&rsquo;s see how to do local CI testing in action:</p>

<script type="text/javascript" src="https://asciinema.org/a/137314.js" id="asciicast-137314" async></script>


<p>This is just the very first step for basic testing.</p>

<p>Later, we should convert this <code>.travis.yml</code> file into a <code>build.sh</code> one to execute, this is the right way
for local CI testing travis-ci and other similar CI systems.</p>

<p>To do that, please follow <a href="https://github.com/teracyhq/docker-files/issues/42">https://github.com/teracyhq/docker-files/issues/42</a> and I&rsquo;ll update this
section more when it&rsquo;s ready.</p>

<h2>Too many virtualization layers?</h2>

<p>At Teracy, the <code>teracy-dev</code> VM is virtualized on a host machine (and the host machine could be virtualized
from another virtualized machine and so on).</p>

<p>Within the <code>teracy-dev</code> VM, we use DinD. And within a Docker container, we can use Docker to run other
Docker containers and so on.</p>

<p>Yeah, welcome to the world of &ldquo;Inception&rdquo;, let&rsquo;s figure out where you are now :&ndash;)?</p>

<p>Happy hacking!</p>

<h2>References</h2>

<ul>
<li><a href="http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/">http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/</a></li>
<li><a href="https://hub.docker.com/r/library/docker/">https://hub.docker.com/r/library/docker/</a></li>
<li><a href="https://github.com/axltxl/docker-jenkins-dood">https://github.com/axltxl/docker-jenkins-dood</a></li>
<li><a href="https://sreeninet.wordpress.com/2016/12/23/docker-in-docker-and-play-with-docker/">https://sreeninet.wordpress.com/2016/12/23/docker-in-docker-and-play-with-docker/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to extend teracy-dev to work with Kubernetes]]></title>
    <link href="http://blog.teracy.com/2017/06/15/how-to-extend-teracy-dev-to-work-with-kubernetes/"/>
    <updated>2017-06-15T11:05:00+00:00</updated>
    <id>http://blog.teracy.com/2017/06/15/how-to-extend-teracy-dev-to-work-with-kubernetes</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2017/06/15/kubernetes_logo_with_border.png" title="Kubernetes Logo" >
<em>Credit: Kubernetes</em></p>

<p><code>teracy-dev</code> is developed with the goal to keep it as minimal and extensible as possible.
The extension feature is so powerful that you can customize the VM in anyway you want. For example,
in this blog post, I&rsquo;ll show you how to extend it to work with Kubernetes.</p>

<!-- more -->


<h2>About Kubernetes</h2>

<p>We&rsquo;re leveraging Docker for all of our development workflow for our clients, internal and open
source projects. <code>teracy-dev</code> is provisioned with Docker by default out of the box so that we can
start working with Docker right away.</p>

<p>However, Docker alone is not enough to work with container technology stack. The production deployment
is different from the local Docker environment. There are many options for container production deployment,
however, we choose Kubernetes as the first class as it&rsquo;s currently the big giant and the future of
container orchestration that we believe in.</p>

<p>Working with Kubernetes requires <code>kubectl</code> client to be available, and if you&rsquo;re starting to use
GKE (Google Container Engine), <code>gcloud</code> (google cloud sdk) client should be available, too.</p>

<p>So let&rsquo;s find a way to extend <code>teracy-dev</code> to install <code>kubectl</code> and <code>gcloud</code>.</p>

<h2>Extending <code>teracy-dev</code></h2>

<p>You can extend <code>teracy-dev</code>&rsquo;s VM by your own choice of operating system and automate the provisioning
process by your own choice of configuration software. &ldquo;The only limit is your imagination&rdquo; :&ndash;).</p>

<p>To extend <code>teracy-dev</code>, we can use any kind of provisioners that are supported by vagrant (as <code>teracy-dev</code>
is built on top of <code>vagrant</code>), you can see more info here: <a href="https://www.vagrantup.com/docs/provisioning/">https://www.vagrantup.com/docs/provisioning/</a></p>

<p>We choose <code>Chef</code> as it&rsquo;s our default provisioner that we have more years of usage experience. We intend
to use <code>Ansible</code> for some future projects, too.</p>

<h2>Installing <code>ChefDK</code></h2>

<p>We&rsquo;re going to use <code>Acme 101</code> project which is used to show the best practices from <code>teracy-dev</code> applied
for organizations.</p>

<p>To work with Chef cookbooks, we need to install <code>ChefDK</code>. Fortunately, there is already an available cookbook
for us to use to install <code>ChefDK</code> automatically on our VM: <a href="https://supermarket.chef.io/cookbooks/chef-dk">https://supermarket.chef.io/cookbooks/chef-dk</a></p>

<p>Usually, we have <code>dev-setup</code> directory to extend <code>teracy-dev</code> (<code>acme-dev</code> in this case). The initial
<code>dev-setup</code> content should be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/0-initial">https://github.com/acme101/kubernetes-dev-setup/tree/0-initial</a></p>

<p>To install <code>ChefDK</code>, we must install the <code>chef-dk</code> cookbook and use it as follows:</p>

<ul>
<li><p>Add <code>depends 'chef-dk'</code> to <code>dev-setup/chef/main-cookbooks/acme/metadata.rb</code></p></li>
<li><p>Install vendor cookbooks with the following commands within the VM:</p></li>
</ul>


<p><code>
$ ws
$ cd dev-setup/chef
$ docker-compose up
</code></p>

<ul>
<li>Sync back the changes from the VM to the host machine:</li>
</ul>


<p><code>
$ vagrant rsync-back
</code></p>

<p>The updated content should be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/1-dependency">https://github.com/acme101/kubernetes-dev-setup/tree/1-dependency</a></p>

<p>Now, to install <code>chef-dk</code>, just add the following Ruby code to <code>default.rb</code> recipe, it&rsquo;s never so easy:</p>

<p><code>
chef_dk 'my_chef_dk' do
  global_shell_init true
  action :install
end
</code></p>

<p>Make sure you have <code>berks-cookbooks</code> paths that <code>vagrant</code> can look up. The configuration step should
be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/2-configuration">https://github.com/acme101/kubernetes-dev-setup/tree/2-configuration</a></p>

<ul>
<li>After that, <code>$ vagrant reload --provision</code> and voila, you should have <code>ChefDk</code> installed.</li>
</ul>


<p><code>
$ vagrant ssh
$ chef --version
Chef Development Kit Version: 1.4.3
chef-client version: 12.19.36
delivery version: master (41b94ffb5efd33723cf72a89bf4d273c8151c9dc)
berks version: 5.6.4
kitchen version: 1.16.0
inspec version: 1.25.1
</code></p>

<p>That&rsquo;s how we use Chef cookbooks to manage the VM&rsquo;s software automatically. We can do the same with
all other types of Chef cookbooks shared and opensourced from the public Chef Supermarket: <a href="https://supermarket.chef.io/">https://supermarket.chef.io/</a>
You can use all the public shared cookbooks to do almost anything you want for your VM.</p>

<p>However, sometimes, there is not available cookbook that we want, then it&rsquo;s time we should
build new cookbooks from scratch.</p>

<h2>Creating new Chef cookbooks</h2>

<p>From the steps above, we have <code>ChefDK</code> available to work with Chef cookbooks. To learn how to use it,
you can follow: <a href="https://github.com/chef/chef-dk">https://github.com/chef/chef-dk</a></p>

<p>I already created the initial <code>kubernetes-stack-cookbook</code> that we can work with. You need to clone
the repo into the <code>workspace</code> directory:</p>

<p><code>
$ cd ~/acme-dev/workspace
$ git clone git@github.com:teracyhq-incubator/kubernetes-stack-cookbook.git
</code></p>

<p>You can test the cookbook within the VM (<code>$ vagrant ssh</code>) with <code>rspec</code>, <code>kitchen</code> easily:</p>

<p><code>
$ ws
$ cd kubernetes-stack-cookbook/
$ rspec
</code></p>

<p>you should see the following similar content:</p>

<p>```
kubernetes-stack::default
  When all attributes are default, on ubuntu 16.04</p>

<pre><code>converges successfully
</code></pre>

<p>kubernetes-stack-test::gcloud_install_default
  When all attributes are default, on ubuntu 16.04</p>

<pre><code>converges successfully
install gcloud
</code></pre>

<p>kubernetes-stack-test::kubectl_install_default
  When all attributes are default, on ubuntu 16.04</p>

<pre><code>converges successfully
install kubectl
</code></pre>

<p>Finished in 1.35 seconds (files took 1.78 seconds to load)
5 examples, 0 failures</p>

<p>ChefSpec Coverage report generated&hellip;</p>

<p>  Total Resources:   7
  Touched Resources: 2
  Touch Coverage:    28.57%</p>

<p>Untouched Resources:</p>

<p>  gcloud[install default gcloud]     kubernetes-stack-test/recipes/gcloud_install_default.rb:1
  execute[import google-cloud-sdk public key]   kubernetes-stack/resources/gcloud.rb:13
  apt_repository[google-cloud-sdk]   kubernetes-stack/resources/gcloud.rb:17
  bash[clean up the mismatched kubectl version]   kubernetes-stack/resources/kubectl.rb:20
  remote_file[/usr/local/bin/kubectl]   kubernetes-stack/resources/kubectl.rb:33
```</p>

<p>and to test with <code>kitchen</code>:</p>

<p><code>
$ ws
$ cd kubernetes-stack-cookbook/
$ export KITCHEN_LOCAL_YAML=.kitchen.dokken.yml
$ kitchen test
</code></p>

<p>then you should see the following similar content:</p>

<p>```
&hellip;
Starting Chef Client, version 13.2.7
[2017-06-14T17:53:24+00:00] WARN: Plugin Network: unable to detect ipaddress
resolving cookbooks for run list: [&ldquo;kubernetes-stack-test::gcloud_install_default&rdquo;]
Synchronizing Cookbooks:
  &ndash; kubernetes-stack-test (0.1.0)
  &ndash; kubernetes-stack (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks&hellip;
Converging 1 resources
Recipe: kubernetes-stack-test::gcloud_install_default
  * gcloud[install default gcloud] action install</p>

<pre><code>* execute[import google-cloud-sdk public key] action run
  - execute curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
* apt_repository[google-cloud-sdk] action add
  * execute[apt-cache gencaches] action nothing (skipped due to action :nothing)
  * apt_update[google-cloud-sdk] action nothing (skipped due to action :nothing)
  * file[/etc/apt/sources.list.d/google-cloud-sdk.list] action create
    - create new file /etc/apt/sources.list.d/google-cloud-sdk.list
    - update content in file /etc/apt/sources.list.d/google-cloud-sdk.list from none to 24ee22
    --- /etc/apt/sources.list.d/google-cloud-sdk.list 2017-06-14 17:53:25.296105380 +0000
    +++ /etc/apt/sources.list.d/.chef-google-cloud-sdk20170614-20-7wqkmu.list 2017-06-14 17:53:25.296105380 +0000
    @@ -1 +1,2 @@
    +deb      "http://packages.cloud.google.com/apt" cloud-sdk-xenial main
    - change mode from '' to '0644'
    - change owner from '' to 'root'
    - change group from '' to 'root'
  * execute[apt-cache gencaches] action run
    - execute apt-cache gencaches
  * apt_update[google-cloud-sdk] action update
    - force update new lists of packages
    * directory[/var/lib/apt/periodic] action create (up to date)
    * directory[/etc/apt/apt.conf.d] action create (up to date)
    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing
      - create new file /etc/apt/apt.conf.d/15update-stamp
      - update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb
      --- /etc/apt/apt.conf.d/15update-stamp  2017-06-14 17:53:26.136525380 +0000
      +++ /etc/apt/apt.conf.d/.chef-15update-stamp20170614-20-1r28edv 2017-06-14 17:53:26.136525380 +0000
      @@ -1 +1,2 @@
      +APT::Update::Post-Invoke-Success {"touch /var/lib/apt/periodic/update-success-stamp 2&gt;/dev/null || true";};
    * execute[apt-get -q update] action run
      - execute apt-get -q update


* apt_package[google-cloud-sdk] action install

  - install version 159.0.0-0 of package google-cloud-sdk
</code></pre>

<p>Running handlers:
Running handlers complete
Chef Client finished, 9/13 resources updated in 55 seconds</p>

<pre><code>   Finished converging &lt;smoke-gcloud-ubuntu-1604&gt; (1m0.97s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Setting up &lt;smoke-gcloud-ubuntu-1604>&hellip;</p>

<pre><code>   Finished setting up &lt;smoke-gcloud-ubuntu-1604&gt; (0m0.00s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Verifying &lt;smoke-gcloud-ubuntu-1604>&hellip;</p>

<pre><code>   Loaded tests from test/smoke/gcloud 
</code></pre>

<p>Profile: tests from test/smoke/gcloud
Version: (not specified)
Target:  docker://16562c9afb7c00447169330fc584b442617a810f6b776d2eb6b78ce87d5d652f</p>

<p>  Command which</p>

<pre><code> ✔  gcloud exit_status should eq 0
 ✔  gcloud stdout should match "/usr/bin/gcloud"
</code></pre>

<p>Test Summary: 2 successful, 0 failures, 0 skipped</p>

<pre><code>   Finished verifying &lt;smoke-gcloud-ubuntu-1604&gt; (0m0.64s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Destroying &lt;smoke-gcloud-ubuntu-1604>&hellip;</p>

<pre><code>   Deleting kitchen sandbox at /home/vagrant/.dokken/kitchen_sandbox/1000b8c847-smoke-gcloud-ubuntu-1604
   Deleting verifier sandbox at /home/vagrant/.dokken/verifier_sandbox/1000b8c847-smoke-gcloud-ubuntu-1604
   Finished destroying &lt;smoke-gcloud-ubuntu-1604&gt; (0m10.67s).
   Finished testing &lt;smoke-gcloud-ubuntu-1604&gt; (1m55.61s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Kitchen is finished. (4m12.76s)
```</p>

<p>That&rsquo;s how we develop and test the cookbook on local dev.</p>

<p>You can see the cookbook here at <a href="https://github.com/teracyhq-incubator/kubernetes-stack-cookbook">https://github.com/teracyhq-incubator/kubernetes-stack-cookbook</a></p>

<p>It&rsquo;s currently a very simple cookbook to support the installation of <code>kubectl</code> and <code>gcloud</code>. In
the future, it will do more than that and support more platforms than current Ubuntu only.</p>

<h2>Installing <code>kubectl</code> and <code>gcloud</code></h2>

<p>The <code>kubernetes-stack-cookbook</code> is not available on the Chef Supermarket (yet), so to use it, we need
to install it from the github repo.</p>

<p>To install <code>kubectl</code>, add this to the <code>default.rb</code> recipe:</p>

<p><code>
kubectl 'install the latest kubectl'
</code></p>

<p>To install <code>gcloud</code>, add this to the <code>default.rb</code> recipe:</p>

<p><code>
gcloud 'install the latest gcloud'
</code></p>

<p>The configuration step should be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/3-kubectl-gcloud-installation">https://github.com/acme101/kubernetes-dev-setup/tree/3-kubectl-gcloud-installation</a></p>

<p>After that, <code>$ vagrant reload --provision</code> and voila (again), you should have both of the packages installed.</p>

<p><code>
$ kubectl version
Client Version: version.Info{Major:"1", Minor:"6", GitVersion:"v1.6.4", GitCommit:"d6f433224538d4f9ca2f7ae19b252e6fcb66a3ae", GitTreeState:"clean", BuildDate:"2017-05-19T18:44:27Z", GoVersion:"go1.7.5", Compiler:"gc", Platform:"linux/amd64"}
The connection to the server localhost:8080 was refused - did you specify the right host or port?
</code></p>

<p><code>
vagrant@acme:~$ gcloud --version
Google Cloud SDK 159.0.0
alpha 2017.06.09
beta 2017.06.09
bq 2.0.24
core 2017.06.09
gcloud
gsutil 4.26
</code></p>

<h2>Setting up Kubernetes local deployment</h2>

<p>I&rsquo;ve shown you how to extend <code>teracy-dev</code> to install new software packages. It is very simple, just follow
the steps I described above to apply for all other projects.</p>

<p><code>kubectl</code> and <code>gcloud</code> are used to work with Google Container Engine (GKE), however, we want
to install Kubernetes to test on local dev, too. So I will have another blog post to cover this more
complex setup: how to create a Kubernetes cluster to work on local dev so that we can test all your
production Docker images on your local dev the same way it is deployed on the production system.</p>

<h2>Summary</h2>

<p>Now you should know how to extend <code>teracy-dev</code> with Chef cookbooks, this is a very common task to do.
And other newcomer devs can just use your <code>dev-setup</code> without learning anything new, just follow
the instructions and learn more to master later.</p>

<p>There are still some areas of configuration for <code>teracy-dev</code> that needs improvement and it will be
available on <code>teracy-dev</code> v0.5.0, so stay tuned for our next very exciting upcoming releases.</p>

<p>I hope that this blog post can help you follow the current best practices to extend <code>teracy-dev</code>
for your own need more easily. If you have any problem with it, let me know by dropping your comments.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 điều nhân viên mong muốn từ các nhà lãnh đạo (Nhưng sẽ không thổ lộ)]]></title>
    <link href="http://blog.teracy.com/2017/06/09/10-dieu-nhan-vien-mong-muon-tu-lanh-dao-nhung-khong-bao-gio-tho-lo/"/>
    <updated>2017-06-09T01:14:00+00:00</updated>
    <id>http://blog.teracy.com/2017/06/09/10-dieu-nhan-vien-mong-muon-tu-lanh-dao-nhung-khong-bao-gio-tho-lo</id>
    <content type="html"><![CDATA[<p> <img class="center" src="/images/2017/06/09/nhan-vien-nhay-viec.jpg" title="nhân viên nhảy việc" >
 <em>CREDIT: Getty Images</em></p>

<p>Không có gì là bí mật cả. Sự hài lòng của nhân viên mang lại tất cả những yếu tố thành công trong kinh doanh. Một nhân viên nhảy việc có thể khiến công việc làm ăn bị thiệt hại khoảng 20% lương chi trả cho họ, chi phí kinh doanh của bạn xoay quanh 20% tiền lương của anh ta hoặc cô ấy &ndash; và đó chỉ là một phần của tác động. Năng suất lao động, văn hoá công ty và danh tiếng thương hiệu có thể bị ảnh hưởng chỉ vì sự ra đi của một thành viên.</p>

<p>Hãy là người trung thực. Tuy nhiên, thật sự mà nói không phải luôn luôn có sự giao tiếp cởi mở giữa giám đốc điều hành và nhân viên. Ngay cả khi điều này tồn tại, nhân viên thường e ngại bộc lộ những điều họ mong muốn, nhu cầu và phản hồi của họ sẽ khiến họ có vẻ là những người đang phàn nàn, do đó dẫn đến những hậu quả tiêu cực.</p>

<p>Nếu một lực lượng lao động sáng tạo, năng suất và đầy nhiệt huyết nằm trong danh sách ưu tiên của bạn trong năm 2017, thì hãy cân nhắc một số điều mà nhân viên của bạn có thể mong muốn nhưng họ sẽ chẳng hề
nói cho bạn biết.</p>

<!-- more -->


<h1>1. Cập nhật công nghệ ở nơi làm việc</h1>

<p>Nếu công nghệ không tồn tại, không hoạt động đúng hoặc không giúp nhân viên của bạn làm việc, năng suất sẽ bị ảnh hưởng. Ngoài các công nghệ phổ biến ở nơi làm việc, có rất nhiều ứng dụng di động, các công cụ tương tác, các công cụ đa phương tiện và nhiều phần mềm, máy móc khác rất đáng được đầu tư để nâng cao năng suất, hiệu quả và sự tham gia tích cực của nhân viên.</p>

<h1>2. Cắt giảm quản lý vi mô</h1>

<p>Quản lý vi mô làm suy yếu khả năng tư duy của lực lượng lao động. Nó cũng sẽ khiến đội ngũ quản lý bị dàn trải, và nhân viên bị mất quyền tự chủ. Đây không phải là môi trường dành cho sự đổi mới phát triển, và có thể khiến cho những nhân viên tài năng rcủa bạn rời khỏi công ty.</p>

<h1>3. Linh hoạt hơn</h1>

<p><a href="https://www.iofficecorp.com/blog/6-ways-mobility-can-transform-the-workplace">Tính di động</a> là một trong những món quà tuyệt vời nhất mà công nghệ mang đến cho lực lượng lao động ngày nay. Hơn 60 phần trăm người lao động báo cáo rằng nhờ tính năng này, họ có thể chọn lựa làm bán thời gian ngoài văn phòng. Theo một báo cáo của <a href="https://www.forbes.com/forbes/welcome/?toURL=https://www.forbes.com/sites/victorlipman/2016/05/02/are-remote-workers-happier-and-more-productive-new-survey-offers-answers/%234c115ced455c&amp;refURL=&amp;referrer=">Forbes</a>, nói chung những người lao động này nói cũng cảm thấy hạnh phúc hơn, bởi vì họ &ldquo;tận hưởng sự tự do và tính linh hoạt.&rdquo;</p>

<p>40% lao động còn lại thì sao? &ndash; Đừng quá ngạc nhiên nếu họ bỏ việc để nhảy sang một công ty khác hỗ trợ họ có được sự cân bằng lớn hơn giữa cuộc sống và công việc.</p>

<h1>4. Một tương lai nghề nghiệp rõ ràng</h1>

<p>Nhân viên của bạn muốn biết có những cơ hội gì phía trước và cũng muốn biết rằng tổ chức của bạn có nhận ra họ là đối tượng phù hợp cho tương lai của tổ chức. Không có một tầm nhìn rõ ràng, không có động lực thúc đẩy, thì nhân viên sẽ cảm thấy không được thoả mãn và không được đánh giá cao.</p>

<h1>5. Cơ hội giáo dục liên tục</h1>

<p><a href="http://www.gallup.com/businessjournal/193274/millennials-jobs-development-opportunities.aspx">87%</a> những người trẻ tuổi cho rằng sự phát triển rất quan trọng trong công việc, đó là nhân tố hàng đầu để duy trì nhân viên. Nếu bạn muốn nuôi dưỡng một lực lượng lao động đầy tham vọng, bạn phải cung cấp cho họ cơ hội để tiếp tục học tập, trau dồi kỹ năng và phát triển như các chuyên gia.</p>

<h1>6. Môi trường làm việc lý tưởng</h1>

<p>Khoảng 30 phần trăm cuộc sống con người được sử dụng để làm việc. Theo báo cáo của <a href="http://www.medicalnewstoday.com/articles/293314.php">Medical News Today</a>, việc ngồi quá lâu trong một khoảng thời gian dài mỗi ngày gây ảnh hưởng tiêu cực đến sức khoẻ của chúng ta. Bằng cách đầu tư vào các vật dụng như ghế ngồi, bàn làm việc và bàn phím, bạn có thể tạo môi trường lành mạnh hơn cho nhân viên của mình, cho phép họ làm việc ít hơn và hiệu quả hơn. Một không gian làm việc thoải mái hơn cũng sẽ cải thiện sự tích cực của nhân viên và năng suất tổng thể.</p>

<h1>7. Các quy trình hợp lý và hiệu quả</h1>

<p>Một yếu tố khác giết chết <a href="https://www.iofficecorp.com/blog/4-ways-to-create-a-happy-workplace-through-technology">sự hài lòng công việc</a> là các quy trình bất hợp lý. Nếu nhân viên buộc phải tuân thủ quy trình làm việc và các giao thức mà họ biết là không hiệu quả và tổ chức không có động thái cải tiến nào, họ sẽ bắt đầu tìm kiếm một ông chủ có tầm nhìn chiến lược rộng lớn hơn.</p>

<p>Các mẹo nhỏ: Công nghệ quản lý tài sản, không gian và nơi làm việc sẽ giúp các nhà lãnh đạo xác định được những tắc nghẽn bất hợp lý trong quy trình làm việc và điều chỉnh kế hoạch chung để sắp xếp các quy trình và hỗ trợ tốt hơn các yêu cầu về nguồn lực.</p>

<h1>8. Công nhận và đánh giá</h1>

<p>Nhân viên luôn muốn được các nhà quản lý và lãnh đạo điều hành quan tâm, lắng nghe. Họ muốn được công nhận khi họ hoàn thành tốt công việc, nhận được các phản hồi mang tính đóng góp, xây dựng nếu họ làm chưa tốt và thường xuyên đánh giá hiệu suất công việc để họ biết trình độ của họ đang ở đâu.</p>

<h1>9. Các nội dung bao hàm</h1>

<p>Khoa học đứng đằng sau lý do tại sao phương tiện truyền thông xã hội lại phổ biến trong cộng đồng như thế, đó là nơi và là phương tiện để con người chúng ta truyền tải các mong muốn vốn có của chính mình. Sự bình đẳng giữa các văn phòng làm việc biểu hiện nền văn hóa công ty vững chắc, là điểm tựa tuyệt đối để nhân viên tin tưởng gắn bó một chặng đường dài. Hãy xác định mục đích và giá trị của thương hiệu, chỉ định các đại sứ văn hoá, đầu tư vào việc cư xử và đối đãi với nhân viên của bạn và xây dựng các sự kiện để tăng cường mối quan hệ giữa các văn phòng.</p>

<h1>10. Sự đền bù công bằng</h1>

<p>Chúng tôi để &ldquo;mong muốn&rdquo; này vào cuối danh sách vì đáng ngạc nhiên là đây không phải mục được ưu tiên nhất trong danh sách các mong muốn của nhân viên, nhưng nó vẫn đặt ra những vấn đề mà tổ chức cần lưu ý đến. Nhân viên của bạn biết giá trị của họ, và các nền tảng trực tuyến như <a href="https://www.glassdoor.com/Salaries/know-your-worth.htm?utm_medium=cpc&amp;utm_source=Google-Ad&amp;utm_campaign=Google-Ad-US-KYW">Glassdoor</a> và <a href="http://www.payscale.com/">PayScale</a> thấu hiểu điều đó. Sự đền bù cạnh tranh sẽ giữ cho nhân viên của bạn trung thành và luôn có động lực trong công việc.</p>

<p>Chỉ vì nhân viên của bạn đã không đề cập đến các mong muốn trên, điều đó không có nghĩa là chúng không nằm trong những mục lưu tâm hàng đầu. Nhưng hãy đảm bảo rằng bạn đang nỗ lực hết mình để đáp ứng đầy đủ 10 mong muốn và nhu cầu đó, bạn sẽ có được một lực lượng lao động năng suất hơn, cảm thấy hài lòng hơn và hạnh phúc hơn.</p>

<p>Nguồn dịch: <a href="https://www.inc.com/elizabeth-dukes/10-things-employees-want-from-leaders-but-wont-tell-them.html?cid=sf01002&amp;sr_share=facebook">10 Things Employees Want From Leaders (But Won&rsquo;t Tell Them)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Làm thế nào để tạo ra văn hoá làm việc từ xa có thể tự tồn tại]]></title>
    <link href="http://blog.teracy.com/2017/05/21/lam-the-nao-de-tao-ra-van-hoa-lam-viec-tu-xa-co-the-tu-ton-tai/"/>
    <updated>2017-05-21T01:14:00+00:00</updated>
    <id>http://blog.teracy.com/2017/05/21/lam-the-nao-de-tao-ra-van-hoa-lam-viec-tu-xa-co-the-tu-ton-tai</id>
    <content type="html"><![CDATA[<p>Sự tồn tại hay diệt vong của đội ngũ làm việc từ xa phụ thuộc vào khả năng giao tiếp và phối hợp; nếu ngay từ đầu các nhân viên không hoà vào văn hoá của công ty, thì cơ hội để họ tiếp tục theo đuổi và tận tụy với công việc sẽ là rất nhỏ. Tuy nhiên, một nền văn hoá thực sự gắn kết và độc đáo có thể sẽ khiến cho các nhân viên (làm việc từ xa hoặc tại chỗ) trung thành, năng suất hơn và quan trọng nhất là khiến họ tự hào về công việc đang làm.</p>

<p>Trong khi các nhân viên làm việc tại chỗ có thể chỉ cần tận dụng 5 phút giải lao cạnh máy nước lạnh để nói chuyện hoặc tán gẫu với nhau, thì việc định hình và duy trì văn hoá làm việc từ xa đòi hỏi nhiều nỗ lực hơn. Tạo dựng sự tương tác dễ dàng giữa các nhân viên là nhiệm vụ bạn cần làm, nhưng bằng cách nào?</p>

<!-- more -->


<p>Nhìn lại <a href="http://process.st/">Process Street</a>, nơi chúng tôi điều hành một con tàu từ xa, ở đó chúng tôi lựa chọn một hoặc hai điều để tạo dựng một nền văn hoá từ xa bền vững. Điều hay nhất của những nền văn hoá này là chúng có thể tự duy trì &ndash; chỉ cần thiết lập chúng và bổ sung tiểu tiết theo yêu cầu. Để xây dựng nền văn hoá này các đội ngũ làm việc từ xa chỉ cần đạt được một hoặc hai nhân tố then chốt, nhưng ở đây tôi sẽ chia sẻ 4 điều được coi là cốt lõi của sự thành công.</p>

<p>Vì vậy, nếu bạn lần đầu thuê các nhân viên làm việc từ xa, cảm thấy lo lắng vì thiếu sự tương tác và khoảng cách giữa nhân viên và công ty, hãy tĩnh tâm và thật thoải mái. Chúng tôi đã thấu hiểu hoàn cảnh của bạn.</p>

<h1>Làm việc từ xa là linh hoạt; bạn cũng nên như vậy</h1>

<p><img class="center" src="/images/2017/05/21/lam-viec-tu-xa.png" title="làm việc từ xa linh hoạt" >
<em>PHOTO: DAMIAN ZALESKI</em></p>

<p>Các nhân viên làm việc từ xa được hưởng lợi từ sự linh hoạt; việc áp dụng một khung giờ làm việc mệnh lệnh đối với họ sẽ là một thảm hoạ. Thay vì điều đó, bạn hãy khuyến khích nhân viên tự đưa ra khoảng thời gian trong ngày giúp họ có thể làm việc năng suất nhất.</p>

<p>Ví dụ, một số người làm việc như những con cú đêm, và hiệu quả tốt nhất là làm việc vào buổi sáng và tối. Hãy để cho những người này được phép làm việc 4 tiếng buổi sáng và 4 tiếng buổi tối để họ cống hiến năng suất nhất, thay vì ép họ phải làm việc theo giờ hành chính. <a href="https://open.buffer.com/how-much-do-you-work-without-set-hours-a-buffer-case-study/">Buffer</a> là ví dụ điển hình khi họ đưa ra chính sách rằng nhân viên có thể làm việc vào giờ nào họ cảm thấy thoải mái nhất.</p>

<p>Điều này không chỉ khiến nhân viên thấy vui vẻ với công việc mà còn giúp họ hoàn thành công việc tốt hơn và tạo môi trường nuôi dưỡng nền văn hoá làm việc từ xa.</p>

<h1>Giao tiếp tập trung</h1>

<p>Nền văn hoá từ xa sẽ không thể được nuôi dưỡng &ndash; đơn phương tồn tại &ndash; nếu quá trình giao tiếp diễn ra dàn trải bằng các tài khoản email và 5 ứng dụng khác nhau. Nếu các nhân viên trong đội không biết người khác đang nói về điều gì, hoặc không thể bình luận do đã xoá đi một chuỗi dài email, thì toàn bộ dự án có thể sẽ đổ bể.</p>

<p>Tuy nhiên, nếu bạn khiến giao tiếp tập trung bằng cách đảm bảo mọi thứ chuyển tiếp chỉ trong 1 hoặc 2 ứng dụng, thì gần như các thành viên trong đội đều nắm rõ tình hình. Đây là bí quyết đối với các đội làm việc từ xa với các múi giờ khác nhau, bởi vì chúng sẽ gần như xoá đi vấn đề nảy sinh do giao tiếp chậm trễ giữa châu Mỹ và châu Âu &ndash; không bỏ sót bất kỳ điều gì (thậm chí những mảng lớn tin nhắn tới nhân viên offline) bởi vì mọi người đều biết cần phải làm thế nào để nắm được tình hình.</p>

<p>Đây cũng chính là phương thức để chiến đấu với nguy cơ thực tế đó là sự cô lập, mà tất cả các nhân viên (các đội) làm việc từ xa đều phải đối mặt; nền văn hoá làm việc từ xa sẽ tiếp tục được nuôi dưỡng khi tránh được việc tự bị phá huỷ. Tại sao không áp dụng khi <a href="https://sandwichvideo.com/">Sandwich Video</a> đã có một video để chứng minh cho điều này?</p>

<iframe width="700" height="394" src="https://www.youtube.com/embed/B6zVzWU95Sw" frameborder="0" allowfullscreen></iframe>


<h1>Thêm gia vị cho văn hoá</h1>

<p><img class="center" src="/images/2017/05/21/them-gia-vi-cho-van-hoa.png" title="Thêm gia vị cho văn hoá của bạn" ></p>

<p>Văn hoá sẽ tự tồn tại nếu những người trong cuộc cảm thấy có điều gì đó đáng duy trì. Nếu quy trình xây dựng văn hoá công ty chỉ là &ldquo;giao tiếp, đảm bảo mọi người thấy được các tin nhắn có liên quan tới họ&rdquo;, thì nó giống như nói với ai đó chỉ quan tâm tới điều giản đơn. Nó không có tác dụng, vì thế bạn cần làm nhiều thứ hơn chứ không đơn thuần là đảm bảo việc chỉ cho mọi người cách giao tiếp với nhau.</p>

<p>Bạn cần phải bổ sung sức sống cho văn hoá công ty, và cách tốt nhất là lôi cuốn được sự tham gia của toàn thể công ty, thu hút cá tính của họ chứ không chỉ là thảo luận công việc. Tạo dựng sự cạnh tranh hữu nghị trên cơ sở lợi ích chung hoặc lên lịch cho các sự kiện chung sẽ giúp tạo sự gắn kết giữa các nhân viên và trao đổi câu chuyện hài hước ngoài giờ làm.</p>

<p>Ví dụ, tại Process Street, hiện chúng tôi đang tiến hành hai cuộc thi, và tương lai sẽ thực hiện thêm. Chúng tôi là những người khác thường (geeky) không hề ngại ngùng, nên việc tổ chức cuộc thi Heartstone cho toàn thể công ty sẽ phù hợp với văn hoá của chúng tôi; một trò chơi bài tập thể trong đó bạn sẽ đấu với những người chơi khác. Để đảm bảo cuộc thi không bị gian lận bởi chủ nghĩa kinh nghiệm, chúng tôi cũng giới hạn việc lựa chọn quân bài đối với cỗ bài sẵn có khi chúng tôi có cả những người chơi mới và lâu năm trong đội của mình.</p>

<p>Nếu đội của bạn không giống kiểu thích trò chơi, bạn có thể tạo ra cuộc thi về các chủ đề khác. Chúng tôi cũng thực hiện cuộc thi giả tưởng để xem ai có thể tìm ra bộ phim hay nhất và tồi nhất. Mỗi tuần, các ứng viên sẽ post một phim lên kênh Slack chung, để sau đó chúng tôi cùng xem và đánh giá chất lượng, chúng tôi đã đánh dấu lưu ý một số như The Beast Must Die, Shivers và (gần đây nhất) là piranha Sharks. Mặc dù đó không phải là những phim hay nhất đáng xem, nhưng hoạt động này giúp chúng tôi xích lại gần nhau là một đội và là điều chúng tôi có thể thảo luận và gắn kết ngoài công việc.</p>

<h1>Khơi mào </h1>

<p><img class="center" src="/images/2017/05/21/khoi-mao.png" title="Khơi mào" ></p>

<p>Sự hoà nhập là thứ mà bạn vừa phải bỏ công sức xây đắp, và (sau đó) vừa là thứ mà gần như bạn có thể để văn hoá xây đắp cho mình. Hãy đảm bảo <a href="https://www.getmailbird.com/supercharge-remote-teams-communications/">quy trình tạo sự hoà nhập</a> cho nhân viên là bền vững bằng cách giới nhiệu nhân viên mới với các thành viên khác trong đội và khuyến khích đội ngũ cũ cởi mở. Đừng khiến cho những cuộc trò chuyện bị ép buộc, mà hãy xây dựng nền tảng then chốt nhằm đảm bảo cho những nhân viên làm việc từ xa vừa biết phải liên hệ với ai khi gặp vấn đề vừa cảm thấy thoải mái khi làm điều đó.</p>

<p>Khi nền văn hoá công ty được thiết lập bền vững, nó sẽ thực sự góp phần lớn cho quy trình tạo sự hoà nhập nhân viên, bởi vì các cuộc thi, sự kiện và tinh thần của đội sẽ gắn kết mọi nhân viên mới vào văn hoá công ty một cách tự nhiên. Bạn sẽ vẫn cần phải giới thiệu họ với đội của mình nhưng với <a href="https://www.getmailbird.com/supercharge-remote-teams-communications/">nền văn hoá giao tiếp</a>, các cuộc thi và sự phối hợp sẽ giúp những người mới hoà nhập với công ty vì mục đích chung.</p>

<p>Bạn đã có được bí quyết để xây dựng văn hoá có thể tự tồn tại trong công ty, thậm chí khi đội ngũ nhân viên làm việc từ xa. Mặc dù cần một quy trình để thiết lập một nền văn hoá hiệu quả, nhưng kết quả mang lại là điều hiển nhiên. Làm cho nhân viên của bạn trung thành, năng suất hơn và trên hết là hạnh phúc với công việc họ đang làm, bất kể là làm việc từ xa hay không, bạn sẽ thấy rằng bất kể nền văn hoá bạn xây dựng điên rồ cỡ nào, nó cũng sẽ đem lại hiệu quả tích cực.</p>

<p>Dịch từ: <a href="https://outsite.co/blog/self-sustaining-remote-culture/">HOW TO CREATE A SELF-SUSTAINING REMOTE CULTURE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up CI/CD system for Next.js with Docker on gitlab-ci, travis-ci, Heroku and Kubernetes]]></title>
    <link href="http://blog.teracy.com/2017/05/09/how-to-set-up-ci-cd-system-for-next.js-with-docker-on-gitlab-ci-travis-ci-heroku-and-kubernetes/"/>
    <updated>2017-05-09T01:14:00+00:00</updated>
    <id>http://blog.teracy.com/2017/05/09/how-to-set-up-ci-cd-system-for-next.js-with-docker-on-gitlab-ci-travis-ci-heroku-and-kubernetes</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2017/05/09/nextjs-hello-world-travis-ci.png" title="travis-ci builds" ></p>

<p>Setting up a CI/CD (continuous integration/continuous delivery) system for Docker applications to be
deployed on staging and production environment with scalability and high availability is not hard.
It took a while to get it done properly, and today I will show you how to set up that system properly
with a Next.js application as an example. You can apply the same process for all other kinds of
Docker applications. So let&rsquo;s get started.</p>

<!-- more -->


<h1>Prerequisites</h1>

<p>Newcomers to Docker ecosystem can enjoy this tutorial.</p>

<p>Experienced ones to Docker ecosystem can review this for your approach and suggest what we can do for
a better approach.</p>

<p>If you know these systems below, that&rsquo;s great and easier to follow this tutorial:</p>

<ul>
<li>Docker</li>
<li>gitlab-ci, travis-ci as CI/CD system</li>
<li>Heroku as a PaaS (Platform as a Service)</li>
<li>Kubernetes (Production-Grade Container Scheduling and Management)</li>
<li>Helm (The Kubernetes Package Manager)</li>
</ul>


<h1>Getting Started</h1>

<p>First, you need to have Docker installed on your system. To make it easier for all platforms (Linux,
macOS, Windows), we&rsquo;re going to use <code>teracy-dev</code> for local dev environment.</p>

<p>To know why <code>teracy-dev</code>, see the blog <a href="/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows/">Teracy-dev &ndash; the Only Truly Universal Productive Development Platform With Docker on macOS, Linux and Windows</a>.</p>

<p>You&rsquo;re not required to use teracy-dev, however, using it should help you follow this tutorial more easily.</p>

<p>We&rsquo;re going to use <a href="https://github.com/acme101/nextjs-hello-world">https://github.com/acme101/nextjs-hello-world</a> as an example project.</p>

<p><code>acme101</code> is a sample github organization which has all the best practices from <code>teracy-dev</code> applied
for organizations, follow it and you can&rsquo;t get lost.</p>

<p><code>nextjs-hello-world</code> is the simplest seed code for Next.js applications with Docker workflow, CI/CD system:</p>

<ul>
<li><p>CI/CD with gitlab-ci: <a href="https://gitlab.com/acme101/nextjs-hello-world/pipelines">https://gitlab.com/acme101/nextjs-hello-world/pipelines</a></p></li>
<li><p>CI/CD with travis-ci: <a href="https://travis-ci.org/acme101/nextjs-hello-world/builds">https://travis-ci.org/acme101/nextjs-hello-world/builds</a></p></li>
<li><p>Auto deployment to Heroku: <a href="https://acme-nextjs-staging.herokuapp.com/">https://acme-nextjs-staging.herokuapp.com/</a></p></li>
<li><p>Auto deployment to GKE (Kubernetes) with terapp.com (A record domain): <a href="https://acme-nextjs-staging.terapp.com/">https://acme-nextjs-staging.terapp.com/</a></p></li>
</ul>


<p>To set up the project on local development:</p>

<ul>
<li><p>Follow: <a href="https://github.com/acme101/dev-setup/blob/master/README.md">https://github.com/acme101/dev-setup/blob/master/README.md</a></p></li>
<li><p>Check out the repo into the <code>acme-dev/workspace</code> directory</p></li>
</ul>


<p>That&rsquo;s it, you&rsquo;re ready to work on the local dev environment.</p>

<h1>Local Dev Environment</h1>

<p>Our development philosophy is this: everything can and should be done on local development with
consistent behaviors between all developers and production deployments.</p>

<p>And Docker helps us with that to create a consistent build-time and run-time environment for all.</p>

<p>Usually, there are 3 modes on local dev for our workflow:</p>

<ul>
<li><p>Dev Mode: developers work on this for new changes, this usually contains development dependencies.</p></li>
<li><p>Prod Mode: developers need to make sure that production Docker image should work on local dev.
This production Docker image, which is different from the one from dev mode, will contain only
the production dependencies, and the runtime environment only.</p>

<p>If developers can only make it work on dev mode, prod mode can break. If prod mode breaks, developers can
check and fix it on local dev. This is really conveninent and time saving.</p></li>
<li><p>Prod Review Mode: we should review the work from others and this mode help us for faster reviewing
process. Basically, everyone&rsquo;s work branch will have the corresponding production Docker image that
we can review it right away on our local dev environment. We don&rsquo;t have to checkout the codes to start
reviewing.</p>

<p>This is helpful for us to set up CI/CD system for reviewing process later: when a pull request is sent,
the CI/CD system should deploy it right away for QA to validate, for example.</p></li>
</ul>


<p>The following is the more details about how to use these modes:</p>

<h2>Dev Mode</h2>

<p>To run dev mode on the current source code.</p>

<p><code>
$ vagrant ssh
$ ws
$ cd nextjs-hello-world
$ docker-compose up -d dev &amp;&amp; docker-compose logs -f dev
</code></p>

<p>Open dev.nextjs.acme.dev (http + https modes) to check it out.</p>

<h2>Prod Mode</h2>

<p>To run prod mode on the current source code.</p>

<p><code>
$ docker-compose run --rm dev yarn run build &amp;&amp; \
  docker-compose -f docker-compose.yml -f docker-compose.prod.yml build prod &amp;&amp; \
  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d prod
</code></p>

<p>We usually scale at least 2 or more containers, so please scale it on local dev too to make sure scaling should work:</p>

<p><code>
$ docker-compose -f docker-compose.yml -f docker-compose.prod.yml scale prod=2
</code></p>

<p>Open nextjs.acme.dev (http + https modes) to check it out.</p>

<p>Don&rsquo;t forget to remove the container after checking out for cleaning up:</p>

<p><code>
$ docker-compose -f docker-compose.yml -f docker-compose.prod.yml stop prod &amp;&amp; \
  docker-compose -f docker-compose.yml -f docker-compose.prod.yml rm -f prod
</code></p>

<h2>Prod Review Mode</h2>

<p>To review prod mode from different built Docker image.</p>

<p>For example, I need to review the <code>hoatle/nextjs-hello-world:features-1-something</code> Docker image
from @hoatle.</p>

<p><code>
$ export DOCKER_IMAGE_REVIEW=hoatle/nextjs-hello-world:features-1-something &amp;&amp; \
docker-compose -f docker-compose.yml -f docker-compose.review.yml pull review &amp;&amp; \
docker-compose -f docker-compose.yml -f docker-compose.review.yml up -d review
</code></p>

<p>We usually scale at least 2 or more containers, so please scale it on local dev too to make sure scaling should work:</p>

<p><code>
$ docker-compose -f docker-compose.yml -f docker-compose.review.yml scale review=2
</code></p>

<p>Open review.nextjs.acme.dev (http + https modes) to check it out.</p>

<p>Don&rsquo;t forget to remove the containers after checking out for cleaning up:</p>

<p><code>
$ docker-compose -f docker-compose.yml -f docker-compose.review.yml stop review &amp;&amp; \
  docker-compose -f docker-compose.yml -f docker-compose.review.yml rm -f review
</code></p>

<p>That&rsquo;s how we, developers, usually work on local development. And to streamline the work, we need
to deploy the applications on production system.</p>

<p>The <code>docker-compose</code> commands above are rather long, maybe you can create bash files to run more easily,
for example, <code>$ dev.sh start</code>, <code>$ dev.sh stop</code>, <code>$ prod.sh build</code>, <code>$ prod.sh start</code>, <code>$ prod.sh stop</code>,
<code>$ review.sh start &lt;image_for_review&gt;</code> and <code>$ review.sh stop</code>.</p>

<h1>Production System</h1>

<p>We build Docker images for deploying so we can leverage any system that accept Docker image.</p>

<p>In this tutorial, we use Heroku and Kubernetes, but you can choose whatever system that Docker is supported.</p>

<p>Heroku is very easy to be used, just push the Docker image and it should work.</p>

<p>Kubernetes (K8s) and Helm is easy to work with, it&rsquo;s mature and it gives us more control over everything.
I recommend using Kubernetes for production system to automate it all.</p>

<h2>Heroku Deployment</h2>

<p>You can follow <a href="https://devcenter.heroku.com/articles/container-registry-and-runtime">https://devcenter.heroku.com/articles/container-registry-and-runtime</a> to deploy your
Docker image to Heroku.</p>

<h2>K8s Deployment</h2>

<p>You can use Google Container Engine (GKE) to deploy K8s applications. Using Helm as the K8s package
manager is more easier and convenient.</p>

<p>I created the Helm chart for this application here:
<a href="https://github.com/acme101/nextjs-hello-world/tree/develop/helm-charts/nextjs-hello-world">https://github.com/acme101/nextjs-hello-world/tree/develop/helm-charts/nextjs-hello-world</a></p>

<p>We can install it right away:</p>

<p><code>
$ helm install halm-charts/nextjs-hello-world
</code></p>

<h1>CI/CD Systems</h1>

<p>To automate all the development integration and production deployment, we use CI/CD systems. You can
use any CI/CD systems available. In this sample project, I set up for gitlab-ci and travis-ci, they
share the same steps and these steps can be applied to any other CI/CD systems.</p>

<p>A typical CI/CD system will need to:</p>

<ul>
<li><p>check for new changes</p>

<ul>
<li>code style</li>
<li>security</li>
<li>all kinds of tests</li>
</ul>
</li>
<li><p>when checks passes, build the production Docker image and push to the Docker registry</p></li>
<li><p>take the production Docker image and deploy it to the production systems</p></li>
<li><p>everyone enjoys the new changes!</p></li>
</ul>


<p>The CI/CD system should work on any forked repo, too.</p>

<p>And to get it work, we need to provide the some environment variables settings. To know more about
some of these variables, please follow:</p>

<ul>
<li><p>How to deploy on Heroku: <a href="https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-heroku.md">https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-heroku.md</a></p></li>
<li><p>How to deploy on GCP: <a href="https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-gcp.md">https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-gcp.md</a></p></li>
</ul>


<h1>Sum up</h1>

<p>In this tutorial, I&rsquo;ve introduced the development philosophy and workflow that we apply for all our
projects at Teracy and our clients' projects. I hope that it could be helpful to others to boost
your productivity with software development.</p>

<p>Happy developing!</p>
]]></content>
  </entry>
  
</feed>
