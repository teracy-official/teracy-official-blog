<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: en | Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/categories/en/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2017-10-19T04:12:43+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[flask-classful v0.14.0]]></title>
    <link href="http://blog.teracy.com/2017/10/18/flask-classful-v0-14-0/"/>
    <updated>2017-10-18T04:56:00+00:00</updated>
    <id>http://blog.teracy.com/2017/10/18/flask-classful-v0-14-0</id>
    <content type="html"><![CDATA[<p><code>Flask-Classful</code> v0.14.0 is the most significant release version since we decided to fork <code>Flask-Classy</code>
in August 2015 to continue the project development. To be honest, this release also has the most
community contribution yet. I&rsquo;d like to take this opportunity to thank everyone involved, without
your support and contribution, releasing this version is impossible.</p>

<!-- more -->


<h2>Community support</h2>

<p>Thank you <a href="https://github.com/apiguy/">@apiguy</a> for creating such a beautiful library.</p>

<p>Thank you, everyone who contributed to the project since the fork:</p>

<p><code>
$ git log 48b7b030f16506e6eea9e217f5aa004b2cf2472f.. --format="%aN &lt;%aE&gt;" --reverse | sort | uniq
Andrew Roberts &lt;adroberts@...&gt;
Chris McNabb &lt;raizyr@...&gt;
Eli Gundry &lt;eligundry@...&gt;
Freedom Dumlao &lt;freedomdumlao@...&gt;
Hayden Chudy &lt;hjc1710@...&gt;
Hoat Le &lt;hoatle@...&gt;
Matt Billenstein &lt;matt@...&gt;
Nick Phillips &lt;nsphilli@...&gt;
Niklas B &lt;niklas@...&gt;
Stephane Rufer &lt;stephane.rufer@...&gt;
blurrcat &lt;blurrcat@...&gt;
hieptq &lt;hieptq8888@...&gt;
slhawkins &lt;slhawkins@...&gt;
</code></p>

<p>And thank you <a href="https://github.com/hjc">@hjc</a> for your helpful feedbacks and accepting
the committer invitation. I hope that we will have more and more committers like you to join the
project.</p>

<p>Thank you to everyone who has been using the library for your everyday projects, creating issues and
feedbacks to make the library better.</p>

<h2>What&rsquo;s new?</h2>

<p>So what&rsquo;s new with this release?</p>

<p>We have released <code>Flask-Classful</code> v0.6.11, v0.7.0, v0.7.1, v0.8.0, v0.9.0, v0.10.0, v0.11.0, v0.12.0,
v0.13.0, v0.13.1 since the fork, but mostly for bug fixes and small improvements.</p>

<p>v0.14.0 introduces a lot of exciting changes that you&rsquo;d love to use it right away. These are some of
the most exciting changes:</p>

<ul>
<li>Type hints support for py3</li>
<li><code>base_class</code> introduced</li>
<li>Add options passing to <code>werkzeug.Routing.Rule</code> from register function</li>
<li>Enable using custom decorators in FlaskView</li>
<li>Should allow specifying excluded methods from becoming routes</li>
<li>Better representations</li>
<li>Docker workflow along with teracy-dev for better dev setup</li>
</ul>


<p>You should check out the changelog and the docs for more detailed information:</p>

<ul>
<li><p>Changelog: <a href="https://github.com/teracyhq/flask-classful/blob/develop/CHANGELOG.md#2017-10-05-hoat-le-hoatleteracycom">https://github.com/teracyhq/flask-classful/blob/develop/CHANGELOG.md#2017-10-05-hoat-le-hoatleteracycom</a></p></li>
<li><p>Docs: <a href="http://flask-classful.teracy.org/">http://flask-classful.teracy.org/</a></p></li>
</ul>


<h2>Lessons learned?</h2>

<p>We released v0.14.0 without breaking changes notice and migration docs which hurt our users
from upgrading. From now on, we will avoid introducing breaking changes but should add deprecated
warnings before breaking things for the next version releases.</p>

<p>v0.14.1 is on its way to fix this problem by updating the changelog and docs.</p>

<p>So rest assured and enjoy the release :&ndash;).</p>

<h2>What&rsquo;s next?</h2>

<p>We created a roadmap release for v0.15.0 and we&rsquo;re waiting for the community feedbacks and ideas for
it.</p>

<p>We will add more sample projects, some projects with integration with other
popular libraries to create top-notch REST APIs. If you have such projects to be promoted,
please let us know then.</p>

<p>Enjoy and happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Docker in Docker (DinD) and Docker outside of Docker (DooD) for local CI testing]]></title>
    <link href="http://blog.teracy.com/2017/09/11/how-to-use-docker-in-docker-dind-and-docker-outside-of-docker-dood-for-local-ci-testing/"/>
    <updated>2017-09-11T08:10:00+00:00</updated>
    <id>http://blog.teracy.com/2017/09/11/how-to-use-docker-in-docker-dind-and-docker-outside-of-docker-dood-for-local-ci-testing</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2017/09/11/spintop-dind.jpg" title="Docker in Docker" >
Credit: <a href="https://github.com/jpetazzo/dind">https://github.com/jpetazzo/dind</a></p>

<p>Although running Docker inside Docker (DinD) or Docker outside of Docker (DooD) is generally not
recommended, there are some legitimate use cases, such as development of Docker itself or for local
CI testing. And in this blog post, I&rsquo;m going to show you how to use DinD or DooD for local CI testing
as it&rsquo;s a very typical use case for local DevOps.</p>

<!-- more -->


<h2>The differences between DinD and DooD?</h2>

<p>DinD is the opposite of DooD.</p>

<p>DinD includes a whole Docker installation inside of it.</p>

<p>DooD uses its underlying host&rsquo;s Docker installation by bind-mounting the Docker socket.</p>

<p>Obviously, DooD should be faster because we can leverage its caching mechanism, and DinD should be
cleaner. DinD should support parallel running but DooD does not, or at least, not very reliable
with my observation. If you want to conduct the clean testing, use DinD. If you want to conduct the
faster testing, use DooD.</p>

<p>DooD is simpler to use than DinD.</p>

<p>And if you want to test with different versions of <code>docker</code>, <code>docker-compose</code>, use DinD and DooD.</p>

<h2>Local CI testing with DinD</h2>

<p>You can use <a href="https://hub.docker.com/r/library/docker/">https://hub.docker.com/r/library/docker/</a> for local testing, however, it&rsquo;s <code>alpine</code> image
which is not very suitable for local CI testing since it is not the default travis-ci environment.
We should use Ubuntu for executing CI scripts on all the CI systems (gitlab, drone, etc.) because we
can port the CI scripts easily between these CI systems.</p>

<p>That is the reason why we build <code>teracy/ubuntu</code> Docker images to be used with DinD, you can check out
the project here: <a href="https://github.com/teracyhq/docker-files/tree/master/ubuntu">https://github.com/teracyhq/docker-files/tree/master/ubuntu</a> and the built Docker
images here: <a href="https://hub.docker.com/r/teracy/ubuntu/tags/">https://hub.docker.com/r/teracy/ubuntu/tags/</a></p>

<p>We also have <code>docker-compose</code> installed to the <code>teracy/ubuntu</code> Docker images for faster testing
with it.</p>

<p>Let&rsquo;s see how it works:</p>

<script type="text/javascript" src="https://asciinema.org/a/137135.js" id="asciicast-137135" async></script>


<p>The commands from the above video:</p>

<p>```bash
$ docker run &mdash;privileged &mdash;name df-docker -d docker:17.06.0-dind # start DinD container</p>

<p>$ docker run &mdash;rm -it &mdash;link df-docker:docker docker:17.06.0 sh # run docker image (Alpine)</p>

<h1>docker version</h1>

<h1>docker-compose &mdash;version # no docker-compose</h1>

<p>$ docker run &mdash;rm -it ubuntu bash # run Ubuntu image within the Docker Alpine container</p>

<h1>uname -a</h1>

<h1>exit</h1>

<h1>uname -a</h1>

<h1>exit</h1>

<p>$ docker run &mdash;rm -it &mdash;link df-docker:docker teracy/ubuntu:16.04-dind-17.06.0-ce bash # run Ubuntu image</p>

<h1>docker version</h1>

<h1>docker-compose version</h1>

<p>$ docker run &mdash;rm -it alpine sh # run Alpine image with the Docker Ubuntu container</p>

<h1>uname -a</h1>

<h1>exit</h1>

<h1>uname -a</h1>

<h1>exit</h1>

<p>```</p>

<h2>Local CI testing with DooD</h2>

<p>Let&rsquo;s see how it works:</p>

<script type="text/javascript" src="https://asciinema.org/a/137139.js" id="asciicast-137139" async></script>


<p>The commands from the above video:</p>

<p>```
$ docker run &mdash;rm -it -v /var/run/docker.sock:/var/run/docker.sock docker sh # start DooD container</p>

<h1>docker version</h1>

<h1>docker-compose &mdash;version # no docker-compose</h1>

<p>$ docker run &mdash;rm -it ubuntu bash # run Ubuntu image within the Docker Alpine container</p>

<h1>cat /etc/lsb-release</h1>

<h1>exit</h1>

<h1>cat /etc/alpine-release</h1>

<h1>exit</h1>

<p>$ docker run &mdash;rm -it -v /var/run/docker.sock:/var/run/docker.sock teracy/ubuntu:16.04-dind-17.06.0-ce bash # start DooD container</p>

<h1>docker version</h1>

<h1>docker-compose version</h1>

<h1>docker run &mdash;rm -it alpine sh # run Alpine image with the Docker Ubuntu container</h1>

<h1>cat /etc/alpine-release</h1>

<h1>exit</h1>

<h1>cat /etc/lsb-release</h1>

<h1>exit</h1>

<p>```</p>

<h2>Volume mounting</h2>

<p>Volume mounting is a bit tricky, you must understand the underlying mechanism of its to get it work.
Basically, you need to make sure the mounting path from the running containers must be the same as the
DinD containers or DooD containers.</p>

<p>Let&rsquo;s see how volume mounting works with DinD:</p>

<script type="text/javascript" src="https://asciinema.org/a/137150.js" id="asciicast-137150" async></script>


<p>The commands from the above video:</p>

<p>```bash</p>

<h1>volume mount with DinD</h1>

<p>$ pwd
$ ls
$ docker run &mdash;privileged &mdash;name df-docker -d -v $(pwd):$(pwd) -w $(pwd) docker:17.06.0-dind # start DinD container
$ docker run &mdash;rm -it &mdash;link df-docker:docker -v $(pwd):$(pwd) -w $(pwd) teracy/ubuntu:16.04-dind-17.06.0-ce bash</p>

<h1>ls</h1>

<h1>docker run &mdash;rm -it -v $(pwd):/opt/app -w /opt/app ubuntu bash</h1>

<h1>ls</h1>

<p>```</p>

<p>Let&rsquo;s see how volume mounting works with DooD:</p>

<script type="text/javascript" src="https://asciinema.org/a/137152.js" id="asciicast-137152" async></script>


<p>The commands from the above video:</p>

<p>```bash</p>

<h1>volume mount with DooD</h1>

<p>$ pwd
$ ls
$ docker run &mdash;rm -it -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/$(pwd) -w $(pwd) teracy/ubuntu:16.04-dind-17.06.0-ce bash # start DooD container</p>

<h1>ls</h1>

<h1>docker run &mdash;rm -it -v $(pwd):/opt/app -w /opt/app ubuntu bash</h1>

<h1>ls</h1>

<p>```</p>

<h2>Local CI Testing with a real project</h2>

<p>Let&rsquo;s see how we can conduct a local CI testing with the <a href="https://github.com/teracyhq/docker-files">https://github.com/teracyhq/docker-files</a> project.</p>

<p>Let&rsquo;s dive into the .travis.yml file <a href="https://github.com/teracyhq/docker-files/blob/master/.travis.yml">https://github.com/teracyhq/docker-files/blob/master/.travis.yml</a>
to test the following scripts:</p>

<p>```yml
before_install:</p>

<h1>install the latest docker and docker-compose versions</h1>

<ul>
<li>sudo apt-get remove docker docker-engine</li>
<li>sudo curl -sSL <a href="https://get.docker.com/">https://get.docker.com/</a> | sh</li>
<li>sudo rm /usr/local/bin/docker-compose

<h1>the latest docker-compose version</h1></li>
<li>export DOCKER_COMPOSE_VERSION=$(curl -s <a href="https://api.github.com/repos/docker/compose/releases/latest">https://api.github.com/repos/docker/compose/releases/latest</a> | grep &lsquo;tag_name&rsquo; | cut -d\&ldquo; -f4)</li>
<li>curl -L <a href="https://github.com/docker/compose/releases/download/$">https://github.com/docker/compose/releases/download/$</a>{DOCKER_COMPOSE_VERSION}/docker-compose-<code>uname -s</code>&ndash;<code>uname -m</code> > docker-compose</li>
<li>chmod +x docker-compose</li>
<li>sudo mv docker-compose /usr/local/bin</li>
<li>docker version</li>
<li>docker-compose version
```</li>
</ul>


<p>Let&rsquo;s see how to do local CI testing in action:</p>

<script type="text/javascript" src="https://asciinema.org/a/137314.js" id="asciicast-137314" async></script>


<p>This is just the very first step for basic testing.</p>

<p>Later, we should convert this <code>.travis.yml</code> file into a <code>build.sh</code> one to execute, this is the right way
for local CI testing travis-ci and other similar CI systems.</p>

<p>To do that, please follow <a href="https://github.com/teracyhq/docker-files/issues/42">https://github.com/teracyhq/docker-files/issues/42</a> and I&rsquo;ll update this
section more when it&rsquo;s ready.</p>

<h2>Too many virtualization layers?</h2>

<p>At Teracy, the <code>teracy-dev</code> VM is virtualized on a host machine (and the host machine could be virtualized
from another virtualized machine and so on).</p>

<p>Within the <code>teracy-dev</code> VM, we use DinD. And within a Docker container, we can use Docker to run other
Docker containers and so on.</p>

<p>Yeah, welcome to the world of &ldquo;Inception&rdquo;, let&rsquo;s figure out where you are now :&ndash;)?</p>

<p>Happy hacking!</p>

<h2>References</h2>

<ul>
<li><a href="http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/">http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/</a></li>
<li><a href="https://hub.docker.com/r/library/docker/">https://hub.docker.com/r/library/docker/</a></li>
<li><a href="https://github.com/axltxl/docker-jenkins-dood">https://github.com/axltxl/docker-jenkins-dood</a></li>
<li><a href="https://sreeninet.wordpress.com/2016/12/23/docker-in-docker-and-play-with-docker/">https://sreeninet.wordpress.com/2016/12/23/docker-in-docker-and-play-with-docker/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kubernetes-stack v0.1.0 Release]]></title>
    <link href="http://blog.teracy.com/2017/08/26/kubernetes-stack-v0-1-0-release/"/>
    <updated>2017-08-26T09:03:00+00:00</updated>
    <id>http://blog.teracy.com/2017/08/26/kubernetes-stack-v0-1-0-release</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been more than two months since we introduced the inception of the <code>kubernetes-stack</code> cookbook
from the blog post <a href="/2017/06/15/how-to-extend-teracy-dev-to-work-with-kubernetes/">How to extend teracy-dev to work with Kubernetes</a> and today we&rsquo;re
very happy to announce its very first milestone release.</p>

<!-- more -->


<h2>What&rsquo;s new?</h2>

<p>This milestone release helps us to manage the installation of these packages: <code>kubectl</code>, <code>helm</code>,
and <code>gcloud</code> automatically.</p>

<p>These are the client packages which are used to communicate and to work with the Google Cloud Platform,
Google Container Engine or any other Kubenertes servers.</p>

<p>You can install, remove any valid versions of those packages onto Ubuntu or CentOS platforms and more
supported platforms will come.</p>

<h2>What&rsquo;s next?</h2>

<p>This cookbook is designed to provide utilities for us to work with <code>Kubernetes</code> stack, so the next
milestone will introduce <code>kubernetes</code> resource to set up and install <code>Kubernetes</code> server which
should work the same as <code>Minukube</code> with better developer productivity enhancement. This
will allow our developers to have a quick local deployment test with k8s on their workstations.</p>

<p>By using this, we can save a lot of server cost, reduce testing time and speed up delivery time of
application deployment.</p>

<p>Developers will understand <code>Kubernetes</code> more deeply when they can do whatever they want with it.
It&rsquo;s very safe! They can destroy and set up a new deployment anytime they want without causing any
harm to their co-workers.</p>

<p>You should check out how it should be used with <code>teracy-dev</code> at <a href="https://github.com/acme101/dev-setup/blob/develop/chef/main-cookbooks/acme/recipes/k8s.rb">https://github.com/acme101/dev-setup/blob/develop/chef/main-cookbooks/acme/recipes/k8s.rb</a></p>

<p>I hope that this free cookbook could make your lives easier when working with <code>Kubernetes</code>:
<a href="https://supermarket.chef.io/cookbooks/kubernetes-stack">https://supermarket.chef.io/cookbooks/kubernetes-stack</a></p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teracy-dev v0.5.0-c1 release]]></title>
    <link href="http://blog.teracy.com/2017/07/27/teracy-dev-v0-5-0-c1-release/"/>
    <updated>2017-07-27T03:41:00+00:00</updated>
    <id>http://blog.teracy.com/2017/07/27/teracy-dev-v0-5-0-c1-release</id>
    <content type="html"><![CDATA[<p>We’re very happy to announce the release of teracy-dev v0.5.0-c1. This version introduces lots of features and changes which support more development, deployment stack along with Docker and Kubernetes.</p>

<h2>v0.5.0-c1</h2>

<p>As you&rsquo;ve known, the RC-1 version means “all minor bugs are fixed, the software works stably, and the code will be released unless there is a last minute bug found after test campaigns.”. However, to meet some requests from our clients and community, we added some features to this release.</p>

<!-- more -->


<h2>Changes</h2>

<p>This major release includes some bugs fixed, document improvement and new features:</p>

<ul>
<li>Support the project base configuration. From now, you can add a list of vagrant configuration to your JSON file and extend the configuration from that.</li>
<li>Update the document for the getting started with windows environment, nodejs debugging.</li>
<li>Add many tools to help your development process.</li>
<li>Add the ability to extend and uniquely extend the array list in the JSON configuration file.</li>
<li>Introduce ACME101 as the sample project which shows the best practices of using teracy-dev.</li>
</ul>


<p>There are more that you should explore yourselves when using <code>teracy-dev</code> for a while.</p>

<h2>What&rsquo;s next?</h2>

<p>Along with the project base configuration we also introduce <a href="https://github.com/acme101">ACME101</a> which has many development stacks to use with teracy-dev. Hopefully, it will be useful for you and we&rsquo;re welcome any contribution, suggestion for ACME101. We&rsquo;re also adding more documents and guide for the project.</p>

<p>We&rsquo;ll take all the feedbacks from v0.5.0 usage to continue making <code>teracy-dev</code> better and greater.</p>

<p>Don&rsquo;t hesitate to use <a href="https://github.com/teracyhq/dev">teracy-dev v0.5.0-c1</a> for your everyday
projects from today by getting started with <a href="http://dev.teracy.org/docs/getting_started.html">http://dev.teracy.org/docs/getting_started.html</a></p>

<p>If you have any feedbacks or problems, you&rsquo;re welcome to create issues for the project at
<a href="https://github.com/teracyhq/dev/issues">https://github.com/teracyhq/dev/issues</a></p>

<p>Enjoy and happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to extend teracy-dev to work with Kubernetes]]></title>
    <link href="http://blog.teracy.com/2017/06/15/how-to-extend-teracy-dev-to-work-with-kubernetes/"/>
    <updated>2017-06-15T11:05:00+00:00</updated>
    <id>http://blog.teracy.com/2017/06/15/how-to-extend-teracy-dev-to-work-with-kubernetes</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2017/06/15/kubernetes_logo_with_border.png" title="Kubernetes Logo" >
<em>Credit: Kubernetes</em></p>

<p><code>teracy-dev</code> is developed with the goal to keep it as minimal and extensible as possible.
The extension feature is so powerful that you can customize the VM in anyway you want. For example,
in this blog post, I&rsquo;ll show you how to extend it to work with Kubernetes.</p>

<!-- more -->


<h2>About Kubernetes</h2>

<p>We&rsquo;re leveraging Docker for all of our development workflow for our clients, internal and open
source projects. <code>teracy-dev</code> is provisioned with Docker by default out of the box so that we can
start working with Docker right away.</p>

<p>However, Docker alone is not enough to work with container technology stack. The production deployment
is different from the local Docker environment. There are many options for container production deployment,
however, we choose Kubernetes as the first class as it&rsquo;s currently the big giant and the future of
container orchestration that we believe in.</p>

<p>Working with Kubernetes requires <code>kubectl</code> client to be available, and if you&rsquo;re starting to use
GKE (Google Container Engine), <code>gcloud</code> (google cloud sdk) client should be available, too.</p>

<p>So let&rsquo;s find a way to extend <code>teracy-dev</code> to install <code>kubectl</code> and <code>gcloud</code>.</p>

<h2>Extending <code>teracy-dev</code></h2>

<p>You can extend <code>teracy-dev</code>&rsquo;s VM by your own choice of operating system and automate the provisioning
process by your own choice of configuration software. &ldquo;The only limit is your imagination&rdquo; :&ndash;).</p>

<p>To extend <code>teracy-dev</code>, we can use any kind of provisioners that are supported by vagrant (as <code>teracy-dev</code>
is built on top of <code>vagrant</code>), you can see more info here: <a href="https://www.vagrantup.com/docs/provisioning/">https://www.vagrantup.com/docs/provisioning/</a></p>

<p>We choose <code>Chef</code> as it&rsquo;s our default provisioner that we have more years of usage experience. We intend
to use <code>Ansible</code> for some future projects, too.</p>

<h2>Installing <code>ChefDK</code></h2>

<p>We&rsquo;re going to use <code>Acme 101</code> project which is used to show the best practices from <code>teracy-dev</code> applied
for organizations.</p>

<p>To work with Chef cookbooks, we need to install <code>ChefDK</code>. Fortunately, there is already an available cookbook
for us to use to install <code>ChefDK</code> automatically on our VM: <a href="https://supermarket.chef.io/cookbooks/chef-dk">https://supermarket.chef.io/cookbooks/chef-dk</a></p>

<p>Usually, we have <code>dev-setup</code> directory to extend <code>teracy-dev</code> (<code>acme-dev</code> in this case). The initial
<code>dev-setup</code> content should be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/0-initial">https://github.com/acme101/kubernetes-dev-setup/tree/0-initial</a></p>

<p>To install <code>ChefDK</code>, we must install the <code>chef-dk</code> cookbook and use it as follows:</p>

<ul>
<li><p>Add <code>depends 'chef-dk'</code> to <code>dev-setup/chef/main-cookbooks/acme/metadata.rb</code></p></li>
<li><p>Install vendor cookbooks with the following commands within the VM:</p></li>
</ul>


<p><code>
$ ws
$ cd dev-setup/chef
$ docker-compose up
</code></p>

<ul>
<li>Sync back the changes from the VM to the host machine:</li>
</ul>


<p><code>
$ vagrant rsync-back
</code></p>

<p>The updated content should be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/1-dependency">https://github.com/acme101/kubernetes-dev-setup/tree/1-dependency</a></p>

<p>Now, to install <code>chef-dk</code>, just add the following Ruby code to <code>default.rb</code> recipe, it&rsquo;s never so easy:</p>

<p><code>
chef_dk 'my_chef_dk' do
  global_shell_init true
  action :install
end
</code></p>

<p>Make sure you have <code>berks-cookbooks</code> paths that <code>vagrant</code> can look up. The configuration step should
be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/2-configuration">https://github.com/acme101/kubernetes-dev-setup/tree/2-configuration</a></p>

<ul>
<li>After that, <code>$ vagrant reload --provision</code> and voila, you should have <code>ChefDk</code> installed.</li>
</ul>


<p><code>
$ vagrant ssh
$ chef --version
Chef Development Kit Version: 1.4.3
chef-client version: 12.19.36
delivery version: master (41b94ffb5efd33723cf72a89bf4d273c8151c9dc)
berks version: 5.6.4
kitchen version: 1.16.0
inspec version: 1.25.1
</code></p>

<p>That&rsquo;s how we use Chef cookbooks to manage the VM&rsquo;s software automatically. We can do the same with
all other types of Chef cookbooks shared and opensourced from the public Chef Supermarket: <a href="https://supermarket.chef.io/">https://supermarket.chef.io/</a>
You can use all the public shared cookbooks to do almost anything you want for your VM.</p>

<p>However, sometimes, there is not available cookbook that we want, then it&rsquo;s time we should
build new cookbooks from scratch.</p>

<h2>Creating new Chef cookbooks</h2>

<p>From the steps above, we have <code>ChefDK</code> available to work with Chef cookbooks. To learn how to use it,
you can follow: <a href="https://github.com/chef/chef-dk">https://github.com/chef/chef-dk</a></p>

<p>I already created the initial <code>kubernetes-stack-cookbook</code> that we can work with. You need to clone
the repo into the <code>workspace</code> directory:</p>

<p><code>
$ cd ~/acme-dev/workspace
$ git clone git@github.com:teracyhq-incubator/kubernetes-stack-cookbook.git
</code></p>

<p>You can test the cookbook within the VM (<code>$ vagrant ssh</code>) with <code>rspec</code>, <code>kitchen</code> easily:</p>

<p><code>
$ ws
$ cd kubernetes-stack-cookbook/
$ rspec
</code></p>

<p>you should see the following similar content:</p>

<p>```
kubernetes-stack::default
  When all attributes are default, on ubuntu 16.04</p>

<pre><code>converges successfully
</code></pre>

<p>kubernetes-stack-test::gcloud_install_default
  When all attributes are default, on ubuntu 16.04</p>

<pre><code>converges successfully
install gcloud
</code></pre>

<p>kubernetes-stack-test::kubectl_install_default
  When all attributes are default, on ubuntu 16.04</p>

<pre><code>converges successfully
install kubectl
</code></pre>

<p>Finished in 1.35 seconds (files took 1.78 seconds to load)
5 examples, 0 failures</p>

<p>ChefSpec Coverage report generated&hellip;</p>

<p>  Total Resources:   7
  Touched Resources: 2
  Touch Coverage:    28.57%</p>

<p>Untouched Resources:</p>

<p>  gcloud[install default gcloud]     kubernetes-stack-test/recipes/gcloud_install_default.rb:1
  execute[import google-cloud-sdk public key]   kubernetes-stack/resources/gcloud.rb:13
  apt_repository[google-cloud-sdk]   kubernetes-stack/resources/gcloud.rb:17
  bash[clean up the mismatched kubectl version]   kubernetes-stack/resources/kubectl.rb:20
  remote_file[/usr/local/bin/kubectl]   kubernetes-stack/resources/kubectl.rb:33
```</p>

<p>and to test with <code>kitchen</code>:</p>

<p><code>
$ ws
$ cd kubernetes-stack-cookbook/
$ export KITCHEN_LOCAL_YAML=.kitchen.dokken.yml
$ kitchen test
</code></p>

<p>then you should see the following similar content:</p>

<p>```
&hellip;
Starting Chef Client, version 13.2.7
[2017-06-14T17:53:24+00:00] WARN: Plugin Network: unable to detect ipaddress
resolving cookbooks for run list: [&ldquo;kubernetes-stack-test::gcloud_install_default&rdquo;]
Synchronizing Cookbooks:
  &ndash; kubernetes-stack-test (0.1.0)
  &ndash; kubernetes-stack (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks&hellip;
Converging 1 resources
Recipe: kubernetes-stack-test::gcloud_install_default
  * gcloud[install default gcloud] action install</p>

<pre><code>* execute[import google-cloud-sdk public key] action run
  - execute curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
* apt_repository[google-cloud-sdk] action add
  * execute[apt-cache gencaches] action nothing (skipped due to action :nothing)
  * apt_update[google-cloud-sdk] action nothing (skipped due to action :nothing)
  * file[/etc/apt/sources.list.d/google-cloud-sdk.list] action create
    - create new file /etc/apt/sources.list.d/google-cloud-sdk.list
    - update content in file /etc/apt/sources.list.d/google-cloud-sdk.list from none to 24ee22
    --- /etc/apt/sources.list.d/google-cloud-sdk.list 2017-06-14 17:53:25.296105380 +0000
    +++ /etc/apt/sources.list.d/.chef-google-cloud-sdk20170614-20-7wqkmu.list 2017-06-14 17:53:25.296105380 +0000
    @@ -1 +1,2 @@
    +deb      "http://packages.cloud.google.com/apt" cloud-sdk-xenial main
    - change mode from '' to '0644'
    - change owner from '' to 'root'
    - change group from '' to 'root'
  * execute[apt-cache gencaches] action run
    - execute apt-cache gencaches
  * apt_update[google-cloud-sdk] action update
    - force update new lists of packages
    * directory[/var/lib/apt/periodic] action create (up to date)
    * directory[/etc/apt/apt.conf.d] action create (up to date)
    * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing
      - create new file /etc/apt/apt.conf.d/15update-stamp
      - update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb
      --- /etc/apt/apt.conf.d/15update-stamp  2017-06-14 17:53:26.136525380 +0000
      +++ /etc/apt/apt.conf.d/.chef-15update-stamp20170614-20-1r28edv 2017-06-14 17:53:26.136525380 +0000
      @@ -1 +1,2 @@
      +APT::Update::Post-Invoke-Success {"touch /var/lib/apt/periodic/update-success-stamp 2&gt;/dev/null || true";};
    * execute[apt-get -q update] action run
      - execute apt-get -q update


* apt_package[google-cloud-sdk] action install

  - install version 159.0.0-0 of package google-cloud-sdk
</code></pre>

<p>Running handlers:
Running handlers complete
Chef Client finished, 9/13 resources updated in 55 seconds</p>

<pre><code>   Finished converging &lt;smoke-gcloud-ubuntu-1604&gt; (1m0.97s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Setting up &lt;smoke-gcloud-ubuntu-1604>&hellip;</p>

<pre><code>   Finished setting up &lt;smoke-gcloud-ubuntu-1604&gt; (0m0.00s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Verifying &lt;smoke-gcloud-ubuntu-1604>&hellip;</p>

<pre><code>   Loaded tests from test/smoke/gcloud 
</code></pre>

<p>Profile: tests from test/smoke/gcloud
Version: (not specified)
Target:  docker://16562c9afb7c00447169330fc584b442617a810f6b776d2eb6b78ce87d5d652f</p>

<p>  Command which</p>

<pre><code> ✔  gcloud exit_status should eq 0
 ✔  gcloud stdout should match "/usr/bin/gcloud"
</code></pre>

<p>Test Summary: 2 successful, 0 failures, 0 skipped</p>

<pre><code>   Finished verifying &lt;smoke-gcloud-ubuntu-1604&gt; (0m0.64s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Destroying &lt;smoke-gcloud-ubuntu-1604>&hellip;</p>

<pre><code>   Deleting kitchen sandbox at /home/vagrant/.dokken/kitchen_sandbox/1000b8c847-smoke-gcloud-ubuntu-1604
   Deleting verifier sandbox at /home/vagrant/.dokken/verifier_sandbox/1000b8c847-smoke-gcloud-ubuntu-1604
   Finished destroying &lt;smoke-gcloud-ubuntu-1604&gt; (0m10.67s).
   Finished testing &lt;smoke-gcloud-ubuntu-1604&gt; (1m55.61s).
</code></pre>

<p>&mdash;&mdash;&ndash;> Kitchen is finished. (4m12.76s)
```</p>

<p>That&rsquo;s how we develop and test the cookbook on local dev.</p>

<p>You can see the cookbook here at <a href="https://github.com/teracyhq-incubator/kubernetes-stack-cookbook">https://github.com/teracyhq-incubator/kubernetes-stack-cookbook</a></p>

<p>It&rsquo;s currently a very simple cookbook to support the installation of <code>kubectl</code> and <code>gcloud</code>. In
the future, it will do more than that and support more platforms than current Ubuntu only.</p>

<h2>Installing <code>kubectl</code> and <code>gcloud</code></h2>

<p>The <code>kubernetes-stack-cookbook</code> is not available on the Chef Supermarket (yet), so to use it, we need
to install it from the github repo.</p>

<p>To install <code>kubectl</code>, add this to the <code>default.rb</code> recipe:</p>

<p><code>
kubectl 'install the latest kubectl'
</code></p>

<p>To install <code>gcloud</code>, add this to the <code>default.rb</code> recipe:</p>

<p><code>
gcloud 'install the latest gcloud'
</code></p>

<p>The configuration step should be like this: <a href="https://github.com/acme101/kubernetes-dev-setup/tree/3-kubectl-gcloud-installation">https://github.com/acme101/kubernetes-dev-setup/tree/3-kubectl-gcloud-installation</a></p>

<p>After that, <code>$ vagrant reload --provision</code> and voila (again), you should have both of the packages installed.</p>

<p><code>
$ kubectl version
Client Version: version.Info{Major:"1", Minor:"6", GitVersion:"v1.6.4", GitCommit:"d6f433224538d4f9ca2f7ae19b252e6fcb66a3ae", GitTreeState:"clean", BuildDate:"2017-05-19T18:44:27Z", GoVersion:"go1.7.5", Compiler:"gc", Platform:"linux/amd64"}
The connection to the server localhost:8080 was refused - did you specify the right host or port?
</code></p>

<p><code>
vagrant@acme:~$ gcloud --version
Google Cloud SDK 159.0.0
alpha 2017.06.09
beta 2017.06.09
bq 2.0.24
core 2017.06.09
gcloud
gsutil 4.26
</code></p>

<h2>Setting up Kubernetes local deployment</h2>

<p>I&rsquo;ve shown you how to extend <code>teracy-dev</code> to install new software packages. It is very simple, just follow
the steps I described above to apply for all other projects.</p>

<p><code>kubectl</code> and <code>gcloud</code> are used to work with Google Container Engine (GKE), however, we want
to install Kubernetes to test on local dev, too. So I will have another blog post to cover this more
complex setup: how to create a Kubernetes cluster to work on local dev so that we can test all your
production Docker images on your local dev the same way it is deployed on the production system.</p>

<h2>Summary</h2>

<p>Now you should know how to extend <code>teracy-dev</code> with Chef cookbooks, this is a very common task to do.
And other newcomer devs can just use your <code>dev-setup</code> without learning anything new, just follow
the instructions and learn more to master later.</p>

<p>There are still some areas of configuration for <code>teracy-dev</code> that needs improvement and it will be
available on <code>teracy-dev</code> v0.5.0, so stay tuned for our next very exciting upcoming releases.</p>

<p>I hope that this blog post can help you follow the current best practices to extend <code>teracy-dev</code>
for your own need more easily. If you have any problem with it, let me know by dropping your comments.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
</feed>
